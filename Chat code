import speech_recognition as sr
import pyttsx3
import datetime
import webbrowser
import wikipedia
import openai
import os

# Initialize text-to-speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # Speed of speech
engine.setProperty('volume', 1)  # Volume (1 is max)

# Set your OpenAI API key
openai.api_key = "Use your own key"

# Function to speak text
def speak(text):
    print(f"Assistant: {text}")
    engine.say(text)
    engine.runAndWait()

# Function to listen to voice input
def take_command():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("ðŸŽ¤ Listening...")
        r.adjust_for_ambient_noise(source)  # Adjust to ambient noise
        r.pause_threshold = 1  # Increase sensitivity
        audio = r.listen(source)

    try:
        print("ðŸ§  Recognizing...")
        query = r.recognize_google(audio, language='en-in')
        print(f"You said: {query}\n")
    except sr.UnknownValueError:
        print("Sorry, I didn't catch that. Please try again.")
        speak("Sorry, I didn't catch that. Could you repeat?")
        return "None"
    except sr.RequestError:
        print("Sorry, I couldn't connect to the service.")
        speak("Sorry, I couldn't connect to the service.")
        return "None"
    return query.lower()

# Function to chat with GPT-4
def ask_chatgpt(question):
    speak("Thinking...")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": question}]
        )
        reply = response.choices[0].message['content']
        speak(reply)
    except:
        speak("Sorry, I couldn't connect to ChatGPT right now.")

# Function to remember something
def remember_this(data):
    with open("memory.txt", "a") as f:
        f.write(data + "\n")
    speak("Got it. I'll remember that.")

# Function to recall memory
def recall_memory():
    try:
        with open("memory.txt", "r") as f:
            notes = f.read()
            speak("Hereâ€™s what you asked me to remember:")
            speak(notes)
    except FileNotFoundError:
        speak("I don't have anything in memory yet.")

# Function to wish the user based on the time of day
def wish():
    hour = int(datetime.datetime.now().hour)
    if hour < 12:
        speak("jai Shree Ram")
    elif hour < 18:
        speak("Ram Ram laddar ke keh raha tha gaddi rokega")
    else:
        speak("Jai BABA ki laadle")
    speak("I'm your AI assistant. How can I help you today?")

# Main function where voice commands are taken and processed
def main():
    wish()
    while True:
        query = take_command()

        # Voice command actions
        if "wikipedia" in query:
            speak("Searching Wikipedia...")
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences=2)
            speak("According to Wikipedia:")
            speak(results)

        elif "open youtube" in query:
            webbrowser.open("https://youtube.com")

        elif "open google" in query:
            webbrowser.open("https://google.com")

        elif "search on youtube" in query:
            query = query.replace("search on youtube", "")
            webbrowser.open(f"https://www.youtube.com/results?search_query={query}")
            speak(f"Here are the results for {query} on YouTube.")

        elif "the time" in query:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")
            speak(f"The time is {strTime}")

        elif "open notepad" in query:
            os.system("notepad")

        elif "remember" in query:
            speak("What should I remember?")
            data = take_command()
            remember_this(data)

        elif "what do you remember" in query:
            recall_memory()

        elif "chat" in query or "ask gpt" in query:
            speak("What do you want to ask?")
            question = take_command()
            ask_chatgpt(question)

        elif "exit" in query or "bye" in query:
            speak("Goodbye! Have a great day!")
            break

        else:
            ask_chatgpt(query)

if __name__ == "__main__":
    main()
